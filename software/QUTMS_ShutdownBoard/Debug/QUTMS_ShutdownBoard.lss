
QUTMS_ShutdownBoard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000041a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003c6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000041a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000044c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  0000048c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000010e7  00000000  00000000  00000534  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000cc9  00000000  00000000  0000161b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007db  00000000  00000000  000022e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000200  00000000  00000000  00002ac0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006c9  00000000  00000000  00002cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000673  00000000  00000000  00003389  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  000039fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <__vector_17>
  48:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__vector_18>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  58:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  5c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  60:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  64:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  68:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  6c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  70:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  74:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  78:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61
  88:	0e 94 51 01 	call	0x2a2	; 0x2a2 <main>
  8c:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <CAN_init>:
	if(mob>=0)CAN_TXMOB(mob, 2, tData, 0, 20); //transmit registration and do not wait for finish
	return mob;
}

uint8_t CAN_init()
{
  94:	ef 92       	push	r14
  96:	ff 92       	push	r15
  98:	0f 93       	push	r16
  9a:	1f 93       	push	r17
  9c:	cf 93       	push	r28
  9e:	df 93       	push	r29
	// Nuke CAN, reset peripheral
	CANGCON = (1 << SWRES);     // Reset the CAN controller hardware and general registers.
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	
	// Init all mobs (needed for proper operation
	for(uint8_t mobCount = 0; mobCount <= 5; mobCount++)
  a6:	80 e0       	ldi	r24, 0x00	; 0
	{
		CANPAGE = (mobCount << 4);		//select the message object to modify
  a8:	0d ee       	ldi	r16, 0xED	; 237
  aa:	10 e0       	ldi	r17, 0x00	; 0
		CANCDMOB = 0;					//make sure we do not do any actions on this mob.
  ac:	6f ee       	ldi	r22, 0xEF	; 239
  ae:	70 e0       	ldi	r23, 0x00	; 0
		CANSTMOB = 0;					//make sure no interrupts are set.
  b0:	4e ee       	ldi	r20, 0xEE	; 238
  b2:	50 e0       	ldi	r21, 0x00	; 0
		// Clear all ID's and Masks in the selected MOB
		CANIDM1 = 0;
  b4:	27 ef       	ldi	r18, 0xF7	; 247
  b6:	30 e0       	ldi	r19, 0x00	; 0
		CANIDM2 = 0;
  b8:	c6 ef       	ldi	r28, 0xF6	; 246
  ba:	d0 e0       	ldi	r29, 0x00	; 0
		CANIDM3 = 0;
  bc:	a5 ef       	ldi	r26, 0xF5	; 245
  be:	b0 e0       	ldi	r27, 0x00	; 0
		CANIDM4 = 0;					//these registers are used to control the mask which filters incoming messages
  c0:	0f 2e       	mov	r0, r31
  c2:	f4 ef       	ldi	r31, 0xF4	; 244
  c4:	ef 2e       	mov	r14, r31
  c6:	f1 2c       	mov	r15, r1
  c8:	f0 2d       	mov	r31, r0
	CANGCON = (1 << SWRES);     // Reset the CAN controller hardware and general registers.
	
	// Init all mobs (needed for proper operation
	for(uint8_t mobCount = 0; mobCount <= 5; mobCount++)
	{
		CANPAGE = (mobCount << 4);		//select the message object to modify
  ca:	98 2f       	mov	r25, r24
  cc:	92 95       	swap	r25
  ce:	90 7f       	andi	r25, 0xF0	; 240
  d0:	f8 01       	movw	r30, r16
  d2:	90 83       	st	Z, r25
		CANCDMOB = 0;					//make sure we do not do any actions on this mob.
  d4:	fb 01       	movw	r30, r22
  d6:	10 82       	st	Z, r1
		CANSTMOB = 0;					//make sure no interrupts are set.
  d8:	fa 01       	movw	r30, r20
  da:	10 82       	st	Z, r1
		// Clear all ID's and Masks in the selected MOB
		CANIDM1 = 0;
  dc:	f9 01       	movw	r30, r18
  de:	10 82       	st	Z, r1
		CANIDM2 = 0;
  e0:	18 82       	st	Y, r1
		CANIDM3 = 0;
  e2:	1c 92       	st	X, r1
		CANIDM4 = 0;					//these registers are used to control the mask which filters incoming messages
  e4:	f7 01       	movw	r30, r14
  e6:	10 82       	st	Z, r1
{
	// Nuke CAN, reset peripheral
	CANGCON = (1 << SWRES);     // Reset the CAN controller hardware and general registers.
	
	// Init all mobs (needed for proper operation
	for(uint8_t mobCount = 0; mobCount <= 5; mobCount++)
  e8:	8f 5f       	subi	r24, 0xFF	; 255
  ea:	86 30       	cpi	r24, 0x06	; 6
  ec:	71 f7       	brne	.-36     	; 0xca <CAN_init+0x36>
		CANIDM3 = 0;
		CANIDM4 = 0;					//these registers are used to control the mask which filters incoming messages
	}
	
	// Set CANBUS comms speed
	CANBT1 = 0x0E;		//these registers control speed of communication
  ee:	8e e0       	ldi	r24, 0x0E	; 14
  f0:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	CANBT2 = 0x04;		//currently with these values, it is 250kbps
  f4:	84 e0       	ldi	r24, 0x04	; 4
  f6:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	CANBT3 = 0x13;		//with 8 TQ per bit.
  fa:	83 e1       	ldi	r24, 0x13	; 19
  fc:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>

	// Enable interrupts
	CANIE2 = (1 << IEMOB4)|(1 << IEMOB5); //enable interrupts on MOB 4 and 5 for receiving
 100:	80 e3       	ldi	r24, 0x30	; 48
 102:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
	CANGIE = (1 << ENRX)|(1 << ENIT); //enable receive interrupt; enable global CAN interrupt (all interrupts)
 106:	80 ea       	ldi	r24, 0xA0	; 160
 108:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
	//put other initialization functions here.

	// Enable CANBUS
	CANGCON = (1 << ENASTB);
 10c:	82 e0       	ldi	r24, 0x02	; 2
 10e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	// Wait for CANBUS peripheral to operate
	if(!(CANGSTA & (1<<ENFG)))return 1;
 112:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
 116:	82 fb       	bst	r24, 2
 118:	88 27       	eor	r24, r24
 11a:	80 f9       	bld	r24, 0
	return 0;
}
 11c:	91 e0       	ldi	r25, 0x01	; 1
 11e:	89 27       	eor	r24, r25
 120:	df 91       	pop	r29
 122:	cf 91       	pop	r28
 124:	1f 91       	pop	r17
 126:	0f 91       	pop	r16
 128:	ff 90       	pop	r15
 12a:	ef 90       	pop	r14
 12c:	08 95       	ret

0000012e <CAN_RXInit>:

void CAN_RXInit(int8_t mob, uint8_t numBytes, uint32_t IDmsk, uint32_t ID)
{
 12e:	ef 92       	push	r14
 130:	ff 92       	push	r15
 132:	0f 93       	push	r16
 134:	1f 93       	push	r17
	CANPAGE = ( mob << 4);		//use the mobth mob for receiving.
 136:	82 95       	swap	r24
 138:	80 7f       	andi	r24, 0xF0	; 240
 13a:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	//IDEMSK is sent with the CAN packet, we choose to not require that it be set, and instead focus on ID match
	CANIDM4 = (IDmsk<<03) & 0xF8;	//shifts the value sets RTRMSK to zero and IDEMSK to 0
 13e:	82 2f       	mov	r24, r18
 140:	88 0f       	add	r24, r24
 142:	88 0f       	add	r24, r24
 144:	88 0f       	add	r24, r24
 146:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
	CANIDM3 = (IDmsk>>05) & 0xFF;
 14a:	da 01       	movw	r26, r20
 14c:	c9 01       	movw	r24, r18
 14e:	68 94       	set
 150:	14 f8       	bld	r1, 4
 152:	b6 95       	lsr	r27
 154:	a7 95       	ror	r26
 156:	97 95       	ror	r25
 158:	87 95       	ror	r24
 15a:	16 94       	lsr	r1
 15c:	d1 f7       	brne	.-12     	; 0x152 <CAN_RXInit+0x24>
 15e:	80 93 f5 00 	sts	0x00F5, r24	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
	CANIDM2 = (IDmsk>>13) & 0xFF;	
 162:	da 01       	movw	r26, r20
 164:	c9 01       	movw	r24, r18
 166:	07 2e       	mov	r0, r23
 168:	7d e0       	ldi	r23, 0x0D	; 13
 16a:	b6 95       	lsr	r27
 16c:	a7 95       	ror	r26
 16e:	97 95       	ror	r25
 170:	87 95       	ror	r24
 172:	7a 95       	dec	r23
 174:	d1 f7       	brne	.-12     	; 0x16a <CAN_RXInit+0x3c>
 176:	70 2d       	mov	r23, r0
 178:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
	CANIDM1 = (IDmsk>>21) & 0xFF;
 17c:	da 01       	movw	r26, r20
 17e:	c9 01       	movw	r24, r18
 180:	07 2e       	mov	r0, r23
 182:	75 e1       	ldi	r23, 0x15	; 21
 184:	b6 95       	lsr	r27
 186:	a7 95       	ror	r26
 188:	97 95       	ror	r25
 18a:	87 95       	ror	r24
 18c:	7a 95       	dec	r23
 18e:	d1 f7       	brne	.-12     	; 0x184 <CAN_RXInit+0x56>
 190:	70 2d       	mov	r23, r0
 192:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
	
	CANIDT4 = (ID<<03) & 0xF8;	//shifts the value sets RTRTAG, RB1TAG and RB0TAG to 0
 196:	8e 2d       	mov	r24, r14
 198:	88 0f       	add	r24, r24
 19a:	88 0f       	add	r24, r24
 19c:	88 0f       	add	r24, r24
 19e:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
	CANIDT3 = (ID>>05) & 0xFF;
 1a2:	d8 01       	movw	r26, r16
 1a4:	c7 01       	movw	r24, r14
 1a6:	68 94       	set
 1a8:	14 f8       	bld	r1, 4
 1aa:	b6 95       	lsr	r27
 1ac:	a7 95       	ror	r26
 1ae:	97 95       	ror	r25
 1b0:	87 95       	ror	r24
 1b2:	16 94       	lsr	r1
 1b4:	d1 f7       	brne	.-12     	; 0x1aa <CAN_RXInit+0x7c>
 1b6:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	CANIDT2 = (ID>>13) & 0xFF;
 1ba:	d8 01       	movw	r26, r16
 1bc:	c7 01       	movw	r24, r14
 1be:	07 2e       	mov	r0, r23
 1c0:	7d e0       	ldi	r23, 0x0D	; 13
 1c2:	b6 95       	lsr	r27
 1c4:	a7 95       	ror	r26
 1c6:	97 95       	ror	r25
 1c8:	87 95       	ror	r24
 1ca:	7a 95       	dec	r23
 1cc:	d1 f7       	brne	.-12     	; 0x1c2 <CAN_RXInit+0x94>
 1ce:	70 2d       	mov	r23, r0
 1d0:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
	CANIDT1 = (ID>>21) & 0xFF;
 1d4:	d8 01       	movw	r26, r16
 1d6:	c7 01       	movw	r24, r14
 1d8:	07 2e       	mov	r0, r23
 1da:	75 e1       	ldi	r23, 0x15	; 21
 1dc:	b6 95       	lsr	r27
 1de:	a7 95       	ror	r26
 1e0:	97 95       	ror	r25
 1e2:	87 95       	ror	r24
 1e4:	7a 95       	dec	r23
 1e6:	d1 f7       	brne	.-12     	; 0x1dc <CAN_RXInit+0xae>
 1e8:	70 2d       	mov	r23, r0
 1ea:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
	
	CANCDMOB = (numBytes << DLC0)|(2<<CONMOB0)|(1 << IDE);		//we are expecting only numBytes bytes; also set the mob to receive mode.
 1ee:	60 69       	ori	r22, 0x90	; 144
 1f0:	60 93 ef 00 	sts	0x00EF, r22	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
}
 1f4:	1f 91       	pop	r17
 1f6:	0f 91       	pop	r16
 1f8:	ff 90       	pop	r15
 1fa:	ef 90       	pop	r14
 1fc:	08 95       	ret

000001fe <IO_init>:

void ADC_init()
{
	ADMUX=(1<<REFS0)|(1<<AREFEN);                      // For Aref=AVcc with external capacitor;
	ADMUX &= ~(1<<ADLAR);								//make sure adlar is not set.
	ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //Prescaler div factor = 128, 125kHz --> lowest we can go for best accuracy.
 1fe:	80 e2       	ldi	r24, 0x20	; 32
 200:	8a b9       	out	0x0a, r24	; 10
 202:	8b b1       	in	r24, 0x0b	; 11
 204:	83 60       	ori	r24, 0x03	; 3
 206:	8b b9       	out	0x0b, r24	; 11
 208:	90 e1       	ldi	r25, 0x10	; 16
 20a:	94 b9       	out	0x04, r25	; 4
 20c:	85 b1       	in	r24, 0x05	; 5
 20e:	84 6e       	ori	r24, 0xE4	; 228
 210:	85 b9       	out	0x05, r24	; 5
 212:	97 b9       	out	0x07, r25	; 7
 214:	88 b1       	in	r24, 0x08	; 8
 216:	81 6e       	ori	r24, 0xE1	; 225
 218:	88 b9       	out	0x08, r24	; 8
 21a:	08 95       	ret

0000021c <ADC_read>:
}

uint16_t ADC_read(uint8_t channel)
{
	channel = (ADMUX & 0xe0)|(channel & 0x1F); //ADMUX | 0b11100000 and channel | 0b00011111 --> this keeps all bits of ADMUX the same except for the bits signalling which channel to use.
 21c:	ec e7       	ldi	r30, 0x7C	; 124
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	90 81       	ld	r25, Z
 222:	90 7e       	andi	r25, 0xE0	; 224
 224:	8f 71       	andi	r24, 0x1F	; 31
 226:	89 2b       	or	r24, r25
	ADMUX = channel;
 228:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);							//ADSC (single conversion bit) is set to 1 to start the conversion process.
 22a:	ea e7       	ldi	r30, 0x7A	; 122
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	80 81       	ld	r24, Z
 230:	80 64       	ori	r24, 0x40	; 64
 232:	80 83       	st	Z, r24
	while(!(ADCSRA & (1<<ADIF)));				//run a loop while the conversion is taking place.
 234:	80 81       	ld	r24, Z
 236:	84 ff       	sbrs	r24, 4
 238:	fd cf       	rjmp	.-6      	; 0x234 <ADC_read+0x18>
	uint16_t result = 0;
	result = ADCL;								//read ADCL first, ADCH after --> order is important! --> also not sure if this code is correct. other ADC examples return 'ADC' instead.
 23a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	result |= ((3 & ADCH) << 8);
 23e:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	ADCSRA|=(1<<ADIF);							//once read and done, clear the 'complete' status by writing 1 to the ADIF bit.
 242:	ea e7       	ldi	r30, 0x7A	; 122
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	90 81       	ld	r25, Z
 248:	90 61       	ori	r25, 0x10	; 16
 24a:	90 83       	st	Z, r25
	return result;								//pass the 10 bit ADC number to requesting function.
 24c:	23 70       	andi	r18, 0x03	; 3
 24e:	90 e0       	ldi	r25, 0x00	; 0
}
 250:	92 2b       	or	r25, r18
 252:	08 95       	ret

00000254 <SHUTDOWN_getBoardTemp>:

uint16_t SHUTDOWN_getBoardTemp() {
	return ADC_read(SHDN_TEMP_CH); // Get status of the SHDN_TEMP
 254:	89 e0       	ldi	r24, 0x09	; 9
 256:	0e 94 0e 01 	call	0x21c	; 0x21c <ADC_read>
}
 25a:	08 95       	ret

0000025c <SHUTDOWN_get5VDiv>:

uint16_t SHUTDOWN_get5VDiv() {
	return ADC_read(SHDN_5V_CH); // Get status of the SHDN_TEMP
 25c:	8a e0       	ldi	r24, 0x0A	; 10
 25e:	0e 94 0e 01 	call	0x21c	; 0x21c <ADC_read>
}
 262:	08 95       	ret

00000264 <SHUTDOWN_get12VDiv>:

uint16_t SHUTDOWN_get12VDiv() {
	return ADC_read(SHDN_12V_CH); // Get status of the SHDN_TEMP
 264:	84 e0       	ldi	r24, 0x04	; 4
 266:	0e 94 0e 01 	call	0x21c	; 0x21c <ADC_read>
}
 26a:	08 95       	ret

0000026c <SHUTDOWN_getLoopStatus>:
/**
 * Gets the status of the shutdown loop
 */
uint16_t SHUTDOWN_getLoopStatus () {
	uint16_t state = 0;
	if(PINB & (1<<PINB1)) {
 26c:	83 b1       	in	r24, 0x03	; 3

/**
 * Gets the status of the shutdown loop
 */
uint16_t SHUTDOWN_getLoopStatus () {
	uint16_t state = 0;
 26e:	81 fb       	bst	r24, 1
 270:	22 27       	eor	r18, r18
 272:	20 f9       	bld	r18, 0
 274:	30 e0       	ldi	r19, 0x00	; 0
 276:	c9 01       	movw	r24, r18
	if(PINB & (1<<PINB1)) {
		state |= SHDN_LOOP_STATUS_HVD;
	}
	if(PINB & (1<<PINB3)) {
 278:	1b 99       	sbic	0x03, 3	; 3
		state |= SHDN_LOOP_STATUS_IMD;
 27a:	82 60       	ori	r24, 0x02	; 2
	}
	if(PIND & (1<<PIND7)) {
 27c:	4f 99       	sbic	0x09, 7	; 9
		state |= SHDN_LOOP_STATUS_BSPD;
 27e:	84 60       	ori	r24, 0x04	; 4
	}
	if(PINC & (1<<PINC1)) {
 280:	31 99       	sbic	0x06, 1	; 6
		state |= SHDN_LOOP_STATUS_BMS_1;
 282:	88 60       	ori	r24, 0x08	; 8
	}
	if(PINB & (1<<PINB0)) {
 284:	18 99       	sbic	0x03, 0	; 3
		state |= SHDN_LOOP_STATUS_BMS_2;
 286:	80 61       	ori	r24, 0x10	; 16
	}
	if(PINC & (1<<PINC0)) {
 288:	30 99       	sbic	0x06, 0	; 6
		state |= SHDN_LOOP_STATUS_SW;
 28a:	90 68       	ori	r25, 0x80	; 128
	}
	if(PINB & (1<<PINB5)) {
 28c:	1d 99       	sbic	0x03, 5	; 3
		state |= SHDN_LOOP_STATUS_SEG_1;
 28e:	80 62       	ori	r24, 0x20	; 32
	}
	if(PINC & (1<<PINC7)) {
 290:	37 99       	sbic	0x06, 7	; 6
		state |= SHDN_LOOP_STATUS_SEG_2;
 292:	80 64       	ori	r24, 0x40	; 64
	}
	if(PIND & (1<<PIND1)) {
 294:	49 99       	sbic	0x09, 1	; 9
		state |= SHDN_LOOP_STATUS_SEG_3;
 296:	80 68       	ori	r24, 0x80	; 128
	}
	if(PIND & (1<<PIND0)) {
 298:	48 99       	sbic	0x09, 0	; 9
		state |= SHDN_LOOP_STATUS_SEG_10;
 29a:	91 60       	ori	r25, 0x01	; 1
	}
	if(PINC & (1<<PINC0)) {
 29c:	30 99       	sbic	0x06, 0	; 6
		state |= SHDN_LOOP_STATUS_SEG_11;
 29e:	92 60       	ori	r25, 0x02	; 2
	}
	return state;
}
 2a0:	08 95       	ret

000002a2 <main>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2a2:	8f e3       	ldi	r24, 0x3F	; 63
 2a4:	9c e9       	ldi	r25, 0x9C	; 156
 2a6:	01 97       	sbiw	r24, 0x01	; 1
 2a8:	f1 f7       	brne	.-4      	; 0x2a6 <main+0x4>
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <main+0xa>
 2ac:	00 00       	nop

int main(void)
{
	_delay_ms(10);
	IO_init();
 2ae:	0e 94 ff 00 	call	0x1fe	; 0x1fe <IO_init>
 2b2:	9f ef       	ldi	r25, 0xFF	; 255
 2b4:	20 e7       	ldi	r18, 0x70	; 112
 2b6:	82 e0       	ldi	r24, 0x02	; 2
 2b8:	91 50       	subi	r25, 0x01	; 1
 2ba:	20 40       	sbci	r18, 0x00	; 0
 2bc:	80 40       	sbci	r24, 0x00	; 0
 2be:	e1 f7       	brne	.-8      	; 0x2b8 <main+0x16>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <main+0x20>
 2c2:	00 00       	nop
	_delay_ms(50);
	//SPI_init();
	CAN_init();	//enable this for AVR CAN
 2c4:	0e 94 4a 00 	call	0x94	; 0x94 <CAN_init>
	//timer_init();
	
	CAN_RXInit(1, 8, 0xffffffff,0x8800001);
 2c8:	ee 24       	eor	r14, r14
 2ca:	e3 94       	inc	r14
 2cc:	f1 2c       	mov	r15, r1
 2ce:	00 e8       	ldi	r16, 0x80	; 128
 2d0:	18 e0       	ldi	r17, 0x08	; 8
 2d2:	2f ef       	ldi	r18, 0xFF	; 255
 2d4:	3f ef       	ldi	r19, 0xFF	; 255
 2d6:	a9 01       	movw	r20, r18
 2d8:	68 e0       	ldi	r22, 0x08	; 8
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	0e 94 97 00 	call	0x12e	; 0x12e <CAN_RXInit>
	
	sei();
 2e0:	78 94       	sei
 2e2:	ff cf       	rjmp	.-2      	; 0x2e2 <main+0x40>

000002e4 <__vector_18>:

	}
}

ISR(CAN_INT_vect)
{
 2e4:	1f 92       	push	r1
 2e6:	0f 92       	push	r0
 2e8:	0f b6       	in	r0, 0x3f	; 63
 2ea:	0f 92       	push	r0
 2ec:	11 24       	eor	r1, r1
 2ee:	ef 92       	push	r14
 2f0:	ff 92       	push	r15
 2f2:	0f 93       	push	r16
 2f4:	1f 93       	push	r17
 2f6:	2f 93       	push	r18
 2f8:	3f 93       	push	r19
 2fa:	4f 93       	push	r20
 2fc:	5f 93       	push	r21
 2fe:	6f 93       	push	r22
 300:	7f 93       	push	r23
 302:	8f 93       	push	r24
 304:	9f 93       	push	r25
 306:	af 93       	push	r26
 308:	bf 93       	push	r27
 30a:	ef 93       	push	r30
 30c:	ff 93       	push	r31
	LED1TOGGLE;
 30e:	9b b1       	in	r25, 0x0b	; 11
 310:	80 e2       	ldi	r24, 0x20	; 32
 312:	89 27       	eor	r24, r25
 314:	8b b9       	out	0x0b, r24	; 11
	
	//CANIDT4 is l
	if(CANSIT2 & (1 << SIT5))	//we received a CAN message on mob 5, which is set up to receive exclusively from the Chassis controller.
 316:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
 31a:	85 ff       	sbrs	r24, 5
 31c:	2b c0       	rjmp	.+86     	; 0x374 <__vector_18+0x90>
	{
		CANPAGE = (5 << 4);			//set the canpage to the receiver MOB
 31e:	80 e5       	ldi	r24, 0x50	; 80
 320:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		CANSTMOB &= ~(1 << RXOK);	//unset the RXOK bit to clear the interrupt.
 324:	ee ee       	ldi	r30, 0xEE	; 238
 326:	f0 e0       	ldi	r31, 0x00	; 0
 328:	80 81       	ld	r24, Z
 32a:	8f 7d       	andi	r24, 0xDF	; 223
 32c:	80 83       	st	Z, r24
		if((CANIDT1 == ((1<<6)|(1<<2))) && ((CANIDT4>>3)== 0b00001) )	//if the received ID has a heartbeat packet
 32e:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 332:	84 34       	cpi	r24, 0x44	; 68
 334:	f9 f4       	brne	.+62     	; 0x374 <__vector_18+0x90>
 336:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 33a:	86 95       	lsr	r24
 33c:	86 95       	lsr	r24
 33e:	86 95       	lsr	r24
 340:	81 30       	cpi	r24, 0x01	; 1
 342:	c1 f4       	brne	.+48     	; 0x374 <__vector_18+0x90>
		{
			// The Chassis controller has sent a heartbeat packet
			// Return it, along with the current shutdown loop information
			
			LED2TOGGLE;
 344:	95 b1       	in	r25, 0x05	; 5
 346:	80 e1       	ldi	r24, 0x10	; 16
 348:	89 27       	eor	r24, r25
 34a:	85 b9       	out	0x05, r24	; 5
			
			uint16_t loopStatus = SHUTDOWN_getLoopStatus();
 34c:	0e 94 36 01 	call	0x26c	; 0x26c <SHUTDOWN_getLoopStatus>
			uint16_t tempStatus = SHUTDOWN_getBoardTemp();
 350:	0e 94 2a 01 	call	0x254	; 0x254 <SHUTDOWN_getBoardTemp>
			uint16_t V5Status = SHUTDOWN_get5VDiv();
 354:	0e 94 2e 01 	call	0x25c	; 0x25c <SHUTDOWN_get5VDiv>
			uint16_t V12Status = SHUTDOWN_get12VDiv();
 358:	0e 94 32 01 	call	0x264	; 0x264 <SHUTDOWN_get12VDiv>

			
			//uint8_t mob = CAN_findFreeTXMOB();
			//CAN_TXMOB(mob, 8, status, 0x03000001, 0);
			
			CAN_RXInit(1, 8, 0xffffffff, 0x8800001);
 35c:	ee 24       	eor	r14, r14
 35e:	e3 94       	inc	r14
 360:	f1 2c       	mov	r15, r1
 362:	00 e8       	ldi	r16, 0x80	; 128
 364:	18 e0       	ldi	r17, 0x08	; 8
 366:	2f ef       	ldi	r18, 0xFF	; 255
 368:	3f ef       	ldi	r19, 0xFF	; 255
 36a:	a9 01       	movw	r20, r18
 36c:	68 e0       	ldi	r22, 0x08	; 8
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	0e 94 97 00 	call	0x12e	; 0x12e <CAN_RXInit>
		}
	}
	CANPAGE = (5 << 4);			//set the canpage to the receiver MOB
 374:	80 e5       	ldi	r24, 0x50	; 80
 376:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	CANSTMOB &= ~(1 << RXOK);	//unset the RXOK bit to clear the interrupt.
 37a:	ee ee       	ldi	r30, 0xEE	; 238
 37c:	f0 e0       	ldi	r31, 0x00	; 0
 37e:	80 81       	ld	r24, Z
 380:	8f 7d       	andi	r24, 0xDF	; 223
 382:	80 83       	st	Z, r24
	
	
}
 384:	ff 91       	pop	r31
 386:	ef 91       	pop	r30
 388:	bf 91       	pop	r27
 38a:	af 91       	pop	r26
 38c:	9f 91       	pop	r25
 38e:	8f 91       	pop	r24
 390:	7f 91       	pop	r23
 392:	6f 91       	pop	r22
 394:	5f 91       	pop	r21
 396:	4f 91       	pop	r20
 398:	3f 91       	pop	r19
 39a:	2f 91       	pop	r18
 39c:	1f 91       	pop	r17
 39e:	0f 91       	pop	r16
 3a0:	ff 90       	pop	r15
 3a2:	ef 90       	pop	r14
 3a4:	0f 90       	pop	r0
 3a6:	0f be       	out	0x3f, r0	; 63
 3a8:	0f 90       	pop	r0
 3aa:	1f 90       	pop	r1
 3ac:	18 95       	reti

000003ae <__vector_17>:

ISR(TIMER0_OVF_vect)
{
 3ae:	1f 92       	push	r1
 3b0:	0f 92       	push	r0
 3b2:	0f b6       	in	r0, 0x3f	; 63
 3b4:	0f 92       	push	r0
 3b6:	11 24       	eor	r1, r1

}
 3b8:	0f 90       	pop	r0
 3ba:	0f be       	out	0x3f, r0	; 63
 3bc:	0f 90       	pop	r0
 3be:	1f 90       	pop	r1
 3c0:	18 95       	reti

000003c2 <_exit>:
 3c2:	f8 94       	cli

000003c4 <__stop_program>:
 3c4:	ff cf       	rjmp	.-2      	; 0x3c4 <__stop_program>
