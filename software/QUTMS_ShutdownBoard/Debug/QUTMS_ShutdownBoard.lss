
QUTMS_ShutdownBoard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000464  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000410  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000494  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d8  00000000  00000000  000004d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000011df  00000000  00000000  000005ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d52  00000000  00000000  0000178b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000904  00000000  00000000  000024dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000250  00000000  00000000  00002de4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006dd  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000797  00000000  00000000  00003711  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00003ea8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__vector_17>
  48:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__vector_18>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  58:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  5c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  60:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  64:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  68:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  6c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  70:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  74:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  78:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61
  88:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <main>
  8c:	0c 94 06 02 	jmp	0x40c	; 0x40c <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <CAN_init>:
	CANIDT3 = (ID>>05) & 0xFF;
	CANIDT2 = (ID>>13) & 0xFF;
	CANIDT1 = (ID>>21) & 0xFF;
	
	CANCDMOB = (numBytes << DLC0)|(2<<CONMOB0)|(1 << IDE);		//we are expecting only numBytes bytes; also set the mob to receive mode.
}
  94:	ef 92       	push	r14
  96:	ff 92       	push	r15
  98:	0f 93       	push	r16
  9a:	1f 93       	push	r17
  9c:	cf 93       	push	r28
  9e:	df 93       	push	r29
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
  a6:	80 e0       	ldi	r24, 0x00	; 0
  a8:	0d ee       	ldi	r16, 0xED	; 237
  aa:	10 e0       	ldi	r17, 0x00	; 0
  ac:	6f ee       	ldi	r22, 0xEF	; 239
  ae:	70 e0       	ldi	r23, 0x00	; 0
  b0:	4e ee       	ldi	r20, 0xEE	; 238
  b2:	50 e0       	ldi	r21, 0x00	; 0
  b4:	27 ef       	ldi	r18, 0xF7	; 247
  b6:	30 e0       	ldi	r19, 0x00	; 0
  b8:	c6 ef       	ldi	r28, 0xF6	; 246
  ba:	d0 e0       	ldi	r29, 0x00	; 0
  bc:	a5 ef       	ldi	r26, 0xF5	; 245
  be:	b0 e0       	ldi	r27, 0x00	; 0
  c0:	0f 2e       	mov	r0, r31
  c2:	f4 ef       	ldi	r31, 0xF4	; 244
  c4:	ef 2e       	mov	r14, r31
  c6:	f1 2c       	mov	r15, r1
  c8:	f0 2d       	mov	r31, r0
  ca:	98 2f       	mov	r25, r24
  cc:	92 95       	swap	r25
  ce:	90 7f       	andi	r25, 0xF0	; 240
  d0:	f8 01       	movw	r30, r16
  d2:	90 83       	st	Z, r25
  d4:	fb 01       	movw	r30, r22
  d6:	10 82       	st	Z, r1
  d8:	fa 01       	movw	r30, r20
  da:	10 82       	st	Z, r1
  dc:	f9 01       	movw	r30, r18
  de:	10 82       	st	Z, r1
  e0:	18 82       	st	Y, r1
  e2:	1c 92       	st	X, r1
  e4:	f7 01       	movw	r30, r14
  e6:	10 82       	st	Z, r1
  e8:	8f 5f       	subi	r24, 0xFF	; 255
  ea:	86 30       	cpi	r24, 0x06	; 6
  ec:	71 f7       	brne	.-36     	; 0xca <CAN_init+0x36>
  ee:	8e e0       	ldi	r24, 0x0E	; 14
  f0:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
  f4:	84 e0       	ldi	r24, 0x04	; 4
  f6:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
  fa:	83 e1       	ldi	r24, 0x13	; 19
  fc:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 100:	80 e3       	ldi	r24, 0x30	; 48
 102:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
 106:	80 ea       	ldi	r24, 0xA0	; 160
 108:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
 10c:	82 e0       	ldi	r24, 0x02	; 2
 10e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 112:	ff ef       	ldi	r31, 0xFF	; 255
 114:	20 e7       	ldi	r18, 0x70	; 112
 116:	82 e0       	ldi	r24, 0x02	; 2
 118:	f1 50       	subi	r31, 0x01	; 1
 11a:	20 40       	sbci	r18, 0x00	; 0
 11c:	80 40       	sbci	r24, 0x00	; 0
 11e:	e1 f7       	brne	.-8      	; 0x118 <CAN_init+0x84>
 120:	00 c0       	rjmp	.+0      	; 0x122 <CAN_init+0x8e>
 122:	00 00       	nop
 124:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
 128:	82 fb       	bst	r24, 2
 12a:	88 27       	eor	r24, r24
 12c:	80 f9       	bld	r24, 0
 12e:	91 e0       	ldi	r25, 0x01	; 1
 130:	89 27       	eor	r24, r25
 132:	df 91       	pop	r29
 134:	cf 91       	pop	r28
 136:	1f 91       	pop	r17
 138:	0f 91       	pop	r16
 13a:	ff 90       	pop	r15
 13c:	ef 90       	pop	r14
 13e:	08 95       	ret

00000140 <CAN_TXMOB>:

void CAN_TXMOB(int8_t mob, uint8_t numBytes, uint8_t * data, uint32_t ID, uint8_t ms_loop_until_TXOK)
{
 140:	ef 92       	push	r14
 142:	0f 93       	push	r16
 144:	1f 93       	push	r17
	CANPAGE = ( mob << 4);		//use the mobth mob
 146:	82 95       	swap	r24
 148:	80 7f       	andi	r24, 0xF0	; 240
 14a:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	//IDEMSK is sent with the CAN packet, we choose to not set it, and instead the receiver will focus on ID match
	CANSTMOB &= ~(1<<TXOK);
 14e:	ee ee       	ldi	r30, 0xEE	; 238
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	80 81       	ld	r24, Z
 154:	8f 7b       	andi	r24, 0xBF	; 191
 156:	80 83       	st	Z, r24
	CANIDM4 = 0;
 158:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
	
	CANIDT4 = (ID<<03) & 0xF8;	//shifts the value sets RTRTAG, RB1TAG and RB0TAG
 15c:	80 2f       	mov	r24, r16
 15e:	88 0f       	add	r24, r24
 160:	88 0f       	add	r24, r24
 162:	88 0f       	add	r24, r24
 164:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
	CANIDT3 = (ID>>05) & 0xFF;
 168:	d9 01       	movw	r26, r18
 16a:	c8 01       	movw	r24, r16
 16c:	68 94       	set
 16e:	14 f8       	bld	r1, 4
 170:	b6 95       	lsr	r27
 172:	a7 95       	ror	r26
 174:	97 95       	ror	r25
 176:	87 95       	ror	r24
 178:	16 94       	lsr	r1
 17a:	d1 f7       	brne	.-12     	; 0x170 <CAN_TXMOB+0x30>
 17c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	CANIDT2 = (ID>>13) & 0xFF;
 180:	d9 01       	movw	r26, r18
 182:	c8 01       	movw	r24, r16
 184:	07 2e       	mov	r0, r23
 186:	7d e0       	ldi	r23, 0x0D	; 13
 188:	b6 95       	lsr	r27
 18a:	a7 95       	ror	r26
 18c:	97 95       	ror	r25
 18e:	87 95       	ror	r24
 190:	7a 95       	dec	r23
 192:	d1 f7       	brne	.-12     	; 0x188 <CAN_TXMOB+0x48>
 194:	70 2d       	mov	r23, r0
 196:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
	CANIDT1 = (ID>>21) & 0xFF;
 19a:	0f 2e       	mov	r0, r31
 19c:	f5 e1       	ldi	r31, 0x15	; 21
 19e:	36 95       	lsr	r19
 1a0:	27 95       	ror	r18
 1a2:	17 95       	ror	r17
 1a4:	07 95       	ror	r16
 1a6:	fa 95       	dec	r31
 1a8:	d1 f7       	brne	.-12     	; 0x19e <CAN_TXMOB+0x5e>
 1aa:	f0 2d       	mov	r31, r0
 1ac:	00 93 f3 00 	sts	0x00F3, r16	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
	for(uint8_t i = 0; i < numBytes; i++)
 1b0:	66 23       	and	r22, r22
 1b2:	71 f0       	breq	.+28     	; 0x1d0 <CAN_TXMOB+0x90>
 1b4:	fa 01       	movw	r30, r20
 1b6:	8f ef       	ldi	r24, 0xFF	; 255
 1b8:	86 0f       	add	r24, r22
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	01 96       	adiw	r24, 0x01	; 1
 1be:	48 0f       	add	r20, r24
 1c0:	59 1f       	adc	r21, r25
	{
		CANMSG = data[i];
 1c2:	aa ef       	ldi	r26, 0xFA	; 250
 1c4:	b0 e0       	ldi	r27, 0x00	; 0
 1c6:	81 91       	ld	r24, Z+
 1c8:	8c 93       	st	X, r24
	
	CANIDT4 = (ID<<03) & 0xF8;	//shifts the value sets RTRTAG, RB1TAG and RB0TAG
	CANIDT3 = (ID>>05) & 0xFF;
	CANIDT2 = (ID>>13) & 0xFF;
	CANIDT1 = (ID>>21) & 0xFF;
	for(uint8_t i = 0; i < numBytes; i++)
 1ca:	e4 17       	cp	r30, r20
 1cc:	f5 07       	cpc	r31, r21
 1ce:	d9 f7       	brne	.-10     	; 0x1c6 <CAN_TXMOB+0x86>
	{
		CANMSG = data[i];
	}
	CANCDMOB = (numBytes << DLC0)|(1<<CONMOB0)|(1 << IDE);		//we are expecting only numBytes bytes; also set the mob to receive mode.
 1d0:	60 65       	ori	r22, 0x50	; 80
 1d2:	60 93 ef 00 	sts	0x00EF, r22	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	for(uint8_t i = 0; i < ms_loop_until_TXOK; i++)	//loop until specified wait time is up
 1d6:	ee 20       	and	r14, r14
 1d8:	a1 f0       	breq	.+40     	; 0x202 <CAN_TXMOB+0xc2>
	{
		if((CANSTMOB & (1 << TXOK)))break;		//check for transmission complete
 1da:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 1de:	86 fd       	sbrc	r24, 6
 1e0:	10 c0       	rjmp	.+32     	; 0x202 <CAN_TXMOB+0xc2>
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	ee ee       	ldi	r30, 0xEE	; 238
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	03 c0       	rjmp	.+6      	; 0x1f0 <CAN_TXMOB+0xb0>
 1ea:	90 81       	ld	r25, Z
 1ec:	96 fd       	sbrc	r25, 6
 1ee:	09 c0       	rjmp	.+18     	; 0x202 <CAN_TXMOB+0xc2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f0:	af e9       	ldi	r26, 0x9F	; 159
 1f2:	bf e0       	ldi	r27, 0x0F	; 15
 1f4:	11 97       	sbiw	r26, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <CAN_TXMOB+0xb4>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <CAN_TXMOB+0xba>
 1fa:	00 00       	nop
	{
		CANMSG = data[i];
	}
	CANCDMOB = (numBytes << DLC0)|(1<<CONMOB0)|(1 << IDE);		//we are expecting only numBytes bytes; also set the mob to receive mode.

	for(uint8_t i = 0; i < ms_loop_until_TXOK; i++)	//loop until specified wait time is up
 1fc:	8f 5f       	subi	r24, 0xFF	; 255
 1fe:	e8 12       	cpse	r14, r24
 200:	f4 cf       	rjmp	.-24     	; 0x1ea <CAN_TXMOB+0xaa>
	{
		if((CANSTMOB & (1 << TXOK)))break;		//check for transmission complete
		_delay_ms(1);								//do nothing for 1 ms
	}
}
 202:	1f 91       	pop	r17
 204:	0f 91       	pop	r16
 206:	ef 90       	pop	r14
 208:	08 95       	ret

0000020a <IO_init>:

void ADC_init()
{
	ADMUX=(1<<REFS0)|(1<<AREFEN);                      // For Aref=AVcc with external capacitor;
	ADMUX &= ~(1<<ADLAR);								//make sure adlar is not set.
	ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //Prescaler div factor = 128, 125kHz --> lowest we can go for best accuracy.
 20a:	1a b8       	out	0x0a, r1	; 10
 20c:	8b b1       	in	r24, 0x0b	; 11
 20e:	83 60       	ori	r24, 0x03	; 3
 210:	8b b9       	out	0x0b, r24	; 11
 212:	14 b8       	out	0x04, r1	; 4
 214:	85 b1       	in	r24, 0x05	; 5
 216:	84 6e       	ori	r24, 0xE4	; 228
 218:	85 b9       	out	0x05, r24	; 5
 21a:	17 b8       	out	0x07, r1	; 7
 21c:	88 b1       	in	r24, 0x08	; 8
 21e:	81 6e       	ori	r24, 0xE1	; 225
 220:	88 b9       	out	0x08, r24	; 8
 222:	08 95       	ret

00000224 <timer_init>:
 224:	14 bc       	out	0x24, r1	; 36
 226:	85 e0       	ldi	r24, 0x05	; 5
 228:	85 bd       	out	0x25, r24	; 37
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
 230:	08 95       	ret

00000232 <ADC_read>:
}

uint16_t ADC_read(uint8_t channel)
{
	channel = (ADMUX & 0xe0)|(channel & 0x1F); //ADMUX | 0b11100000 and channel | 0b00011111 --> this keeps all bits of ADMUX the same except for the bits signalling which channel to use.
 232:	ec e7       	ldi	r30, 0x7C	; 124
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	90 81       	ld	r25, Z
 238:	90 7e       	andi	r25, 0xE0	; 224
 23a:	8f 71       	andi	r24, 0x1F	; 31
 23c:	89 2b       	or	r24, r25
	ADMUX = channel;
 23e:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);							//ADSC (single conversion bit) is set to 1 to start the conversion process.
 240:	ea e7       	ldi	r30, 0x7A	; 122
 242:	f0 e0       	ldi	r31, 0x00	; 0
 244:	80 81       	ld	r24, Z
 246:	80 64       	ori	r24, 0x40	; 64
 248:	80 83       	st	Z, r24
	while(!(ADCSRA & (1<<ADIF)));				//run a loop while the conversion is taking place.
 24a:	80 81       	ld	r24, Z
 24c:	84 ff       	sbrs	r24, 4
 24e:	fd cf       	rjmp	.-6      	; 0x24a <ADC_read+0x18>
	uint16_t result = 0;
	result = ADCL;								//read ADCL first, ADCH after --> order is important! --> also not sure if this code is correct. other ADC examples return 'ADC' instead.
 250:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	result |= ((3 & ADCH) << 8);
 254:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	ADCSRA|=(1<<ADIF);							//once read and done, clear the 'complete' status by writing 1 to the ADIF bit.
 258:	ea e7       	ldi	r30, 0x7A	; 122
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	90 81       	ld	r25, Z
 25e:	90 61       	ori	r25, 0x10	; 16
 260:	90 83       	st	Z, r25
	return result;								//pass the 10 bit ADC number to requesting function.
 262:	23 70       	andi	r18, 0x03	; 3
 264:	90 e0       	ldi	r25, 0x00	; 0
}
 266:	92 2b       	or	r25, r18
 268:	08 95       	ret

0000026a <SHUTDOWN_getBoardTemp>:



uint16_t SHUTDOWN_getBoardTemp() {
	return ADC_read(SHDN_TEMP_CH); // Get status of the SHDN_TEMP
 26a:	89 e0       	ldi	r24, 0x09	; 9
 26c:	0e 94 19 01 	call	0x232	; 0x232 <ADC_read>
}
 270:	08 95       	ret

00000272 <SHUTDOWN_get5VDiv>:

uint16_t SHUTDOWN_get5VDiv() {
	return ADC_read(SHDN_5V_CH); // Get status of the SHDN_TEMP
 272:	8a e0       	ldi	r24, 0x0A	; 10
 274:	0e 94 19 01 	call	0x232	; 0x232 <ADC_read>
}
 278:	08 95       	ret

0000027a <SHUTDOWN_get12VDiv>:

uint16_t SHUTDOWN_get12VDiv() {
	return ADC_read(SHDN_12V_CH); // Get status of the SHDN_TEMP
 27a:	84 e0       	ldi	r24, 0x04	; 4
 27c:	0e 94 19 01 	call	0x232	; 0x232 <ADC_read>
}
 280:	08 95       	ret

00000282 <SHUTDOWN_getLoopStatus>:
/**
 * Gets the status of the shutdown loop
 */
uint16_t SHUTDOWN_getLoopStatus () {
	uint16_t state = 0;
	if(PINB & (1<<PINB1)) {
 282:	83 b1       	in	r24, 0x03	; 3

/**
 * Gets the status of the shutdown loop
 */
uint16_t SHUTDOWN_getLoopStatus () {
	uint16_t state = 0;
 284:	81 fb       	bst	r24, 1
 286:	22 27       	eor	r18, r18
 288:	20 f9       	bld	r18, 0
 28a:	30 e0       	ldi	r19, 0x00	; 0
 28c:	c9 01       	movw	r24, r18
	if(PINB & (1<<PINB1)) {
		state |= SHDN_LOOP_STATUS_HVD;
	}
	if(PINB & (1<<PINB3)) {
 28e:	1b 99       	sbic	0x03, 3	; 3
		state |= SHDN_LOOP_STATUS_IMD;
 290:	82 60       	ori	r24, 0x02	; 2
	}
	if(PIND & (1<<PIND7)) {
 292:	4f 99       	sbic	0x09, 7	; 9
		state |= SHDN_LOOP_STATUS_BSPD;
 294:	84 60       	ori	r24, 0x04	; 4
	}
	if(PINC & (1<<PINC1)) {
 296:	31 99       	sbic	0x06, 1	; 6
		state |= SHDN_LOOP_STATUS_BMS_1;
 298:	88 60       	ori	r24, 0x08	; 8
	}
	if(PINB & (1<<PINB0)) {
 29a:	18 99       	sbic	0x03, 0	; 3
		state |= SHDN_LOOP_STATUS_BMS_2;
 29c:	80 61       	ori	r24, 0x10	; 16
	}
	if(PINC & (1<<PINC0)) {
 29e:	30 99       	sbic	0x06, 0	; 6
		state |= SHDN_LOOP_STATUS_SW;
 2a0:	90 68       	ori	r25, 0x80	; 128
	}
	if(PINB & (1<<PINB5)) {
 2a2:	1d 99       	sbic	0x03, 5	; 3
		state |= SHDN_LOOP_STATUS_SEG_1;
 2a4:	80 62       	ori	r24, 0x20	; 32
	}
	if(PINC & (1<<PINC7)) {
 2a6:	37 99       	sbic	0x06, 7	; 6
		state |= SHDN_LOOP_STATUS_SEG_2;
 2a8:	80 64       	ori	r24, 0x40	; 64
	}
	if(PIND & (1<<PIND1)) {
 2aa:	49 99       	sbic	0x09, 1	; 9
		state |= SHDN_LOOP_STATUS_SEG_3;
 2ac:	80 68       	ori	r24, 0x80	; 128
	}
	if(PIND & (1<<PIND0)) {
 2ae:	48 99       	sbic	0x09, 0	; 9
		state |= SHDN_LOOP_STATUS_SEG_10;
 2b0:	91 60       	ori	r25, 0x01	; 1
	}
	if(PINC & (1<<PINC0)) {
 2b2:	30 99       	sbic	0x06, 0	; 6
		state |= SHDN_LOOP_STATUS_SEG_11;
 2b4:	92 60       	ori	r25, 0x02	; 2
	}
	return state;
}
 2b6:	08 95       	ret

000002b8 <main>:
 2b8:	8f e3       	ldi	r24, 0x3F	; 63
 2ba:	9c e9       	ldi	r25, 0x9C	; 156
 2bc:	01 97       	sbiw	r24, 0x01	; 1
 2be:	f1 f7       	brne	.-4      	; 0x2bc <main+0x4>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <main+0xa>
 2c2:	00 00       	nop

int main(void)
{
	_delay_ms(10);
	IO_init();
 2c4:	0e 94 05 01 	call	0x20a	; 0x20a <IO_init>
 2c8:	9f ef       	ldi	r25, 0xFF	; 255
 2ca:	20 e7       	ldi	r18, 0x70	; 112
 2cc:	82 e0       	ldi	r24, 0x02	; 2
 2ce:	91 50       	subi	r25, 0x01	; 1
 2d0:	20 40       	sbci	r18, 0x00	; 0
 2d2:	80 40       	sbci	r24, 0x00	; 0
 2d4:	e1 f7       	brne	.-8      	; 0x2ce <main+0x16>
 2d6:	00 c0       	rjmp	.+0      	; 0x2d8 <main+0x20>
 2d8:	00 00       	nop
	_delay_ms(50);
	SPI_init();
 2da:	0e 94 fd 01 	call	0x3fa	; 0x3fa <SPI_init>
	CAN_init();	//enable this for AVR CAN
 2de:	0e 94 4a 00 	call	0x94	; 0x94 <CAN_init>
	timer_init();
 2e2:	0e 94 12 01 	call	0x224	; 0x224 <timer_init>
	
	sei();
 2e6:	78 94       	sei
 2e8:	ff cf       	rjmp	.-2      	; 0x2e8 <main+0x30>

000002ea <__vector_18>:
    while(1)
    {}
}

ISR(CAN_INT_vect)
{
 2ea:	1f 92       	push	r1
 2ec:	0f 92       	push	r0
 2ee:	0f b6       	in	r0, 0x3f	; 63
 2f0:	0f 92       	push	r0
 2f2:	11 24       	eor	r1, r1
 2f4:	cf 92       	push	r12
 2f6:	df 92       	push	r13
 2f8:	ef 92       	push	r14
 2fa:	ff 92       	push	r15
 2fc:	0f 93       	push	r16
 2fe:	1f 93       	push	r17
 300:	2f 93       	push	r18
 302:	3f 93       	push	r19
 304:	4f 93       	push	r20
 306:	5f 93       	push	r21
 308:	6f 93       	push	r22
 30a:	7f 93       	push	r23
 30c:	8f 93       	push	r24
 30e:	9f 93       	push	r25
 310:	af 93       	push	r26
 312:	bf 93       	push	r27
 314:	ef 93       	push	r30
 316:	ff 93       	push	r31
 318:	cf 93       	push	r28
 31a:	df 93       	push	r29
 31c:	cd b7       	in	r28, 0x3d	; 61
 31e:	de b7       	in	r29, 0x3e	; 62
 320:	28 97       	sbiw	r28, 0x08	; 8
 322:	de bf       	out	0x3e, r29	; 62
 324:	cd bf       	out	0x3d, r28	; 61
	//CANIDT4 is l
	if(CANSIT2 & (1 << SIT5))	//we received a CAN message on mob 5, which is set up to receive exclusively from the Chassis controller.
 326:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
 32a:	85 ff       	sbrs	r24, 5
 32c:	35 c0       	rjmp	.+106    	; 0x398 <__vector_18+0xae>
	{
		CANPAGE = (5 << 4);			//set the canpage to the receiver MOB
 32e:	80 e5       	ldi	r24, 0x50	; 80
 330:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		CANSTMOB &= ~(1 << RXOK);	//unset the RXOK bit to clear the interrupt.
 334:	ee ee       	ldi	r30, 0xEE	; 238
 336:	f0 e0       	ldi	r31, 0x00	; 0
 338:	80 81       	ld	r24, Z
 33a:	8f 7d       	andi	r24, 0xDF	; 223
 33c:	80 83       	st	Z, r24
		if((CANIDT1 == ((1<<6)|(1<<2))) && ((CANIDT4>>3)== 0b00001) )	//if the received ID has a heartbeat packet
 33e:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 342:	84 34       	cpi	r24, 0x44	; 68
 344:	49 f5       	brne	.+82     	; 0x398 <__vector_18+0xae>
 346:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 34a:	86 95       	lsr	r24
 34c:	86 95       	lsr	r24
 34e:	86 95       	lsr	r24
 350:	81 30       	cpi	r24, 0x01	; 1
 352:	11 f5       	brne	.+68     	; 0x398 <__vector_18+0xae>
		{
			// The Chassis controller has sent a heartbeat packet
			// Return it, along with the current shutdown loop information
			
			uint16_t loopStatus = SHUTDOWN_getLoopStatus();
 354:	0e 94 41 01 	call	0x282	; 0x282 <SHUTDOWN_getLoopStatus>
 358:	08 2f       	mov	r16, r24
 35a:	19 2f       	mov	r17, r25
			uint16_t tempStatus = SHUTDOWN_getBoardTemp();
 35c:	0e 94 35 01 	call	0x26a	; 0x26a <SHUTDOWN_getBoardTemp>
 360:	e8 2e       	mov	r14, r24
 362:	f9 2e       	mov	r15, r25
			uint16_t V5Status = SHUTDOWN_get5VDiv();
 364:	0e 94 39 01 	call	0x272	; 0x272 <SHUTDOWN_get5VDiv>
 368:	c8 2e       	mov	r12, r24
 36a:	d9 2e       	mov	r13, r25
			uint16_t V12Status = SHUTDOWN_get12VDiv();
 36c:	0e 94 3d 01 	call	0x27a	; 0x27a <SHUTDOWN_get12VDiv>
			
			uint8_t status[8];
			status[0] = (V12Status);
 370:	89 83       	std	Y+1, r24	; 0x01
			status[1] = (V12Status >> 8);
 372:	9a 83       	std	Y+2, r25	; 0x02
			status[2] = (V5Status);
 374:	cb 82       	std	Y+3, r12	; 0x03
			status[3] = (V5Status >> 8);
 376:	dc 82       	std	Y+4, r13	; 0x04
			status[4] = (tempStatus);
 378:	ed 82       	std	Y+5, r14	; 0x05
			status[5] = (tempStatus >> 8);
 37a:	fe 82       	std	Y+6, r15	; 0x06
			status[6] = (loopStatus);
 37c:	0f 83       	std	Y+7, r16	; 0x07
			status[7] = (loopStatus >> 8);
 37e:	18 87       	std	Y+8, r17	; 0x08
			
			CAN_TXMOB(5, 8, status, 0b00000100000000000000000000000, 0);
 380:	e1 2c       	mov	r14, r1
 382:	00 e0       	ldi	r16, 0x00	; 0
 384:	10 e0       	ldi	r17, 0x00	; 0
 386:	20 e8       	ldi	r18, 0x80	; 128
 388:	30 e0       	ldi	r19, 0x00	; 0
 38a:	ae 01       	movw	r20, r28
 38c:	4f 5f       	subi	r20, 0xFF	; 255
 38e:	5f 4f       	sbci	r21, 0xFF	; 255
 390:	68 e0       	ldi	r22, 0x08	; 8
 392:	85 e0       	ldi	r24, 0x05	; 5
 394:	0e 94 a0 00 	call	0x140	; 0x140 <CAN_TXMOB>
				//default:
					//break;
			//}
		//}
	}
	CANPAGE = (5 << 4);			//set the canpage to the receiver MOB
 398:	80 e5       	ldi	r24, 0x50	; 80
 39a:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	CANSTMOB &= ~(1 << RXOK);	//unset the RXOK bit to clear the interrupt.
 39e:	ee ee       	ldi	r30, 0xEE	; 238
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
 3a2:	80 81       	ld	r24, Z
 3a4:	8f 7d       	andi	r24, 0xDF	; 223
 3a6:	80 83       	st	Z, r24
}
 3a8:	28 96       	adiw	r28, 0x08	; 8
 3aa:	0f b6       	in	r0, 0x3f	; 63
 3ac:	f8 94       	cli
 3ae:	de bf       	out	0x3e, r29	; 62
 3b0:	0f be       	out	0x3f, r0	; 63
 3b2:	cd bf       	out	0x3d, r28	; 61
 3b4:	df 91       	pop	r29
 3b6:	cf 91       	pop	r28
 3b8:	ff 91       	pop	r31
 3ba:	ef 91       	pop	r30
 3bc:	bf 91       	pop	r27
 3be:	af 91       	pop	r26
 3c0:	9f 91       	pop	r25
 3c2:	8f 91       	pop	r24
 3c4:	7f 91       	pop	r23
 3c6:	6f 91       	pop	r22
 3c8:	5f 91       	pop	r21
 3ca:	4f 91       	pop	r20
 3cc:	3f 91       	pop	r19
 3ce:	2f 91       	pop	r18
 3d0:	1f 91       	pop	r17
 3d2:	0f 91       	pop	r16
 3d4:	ff 90       	pop	r15
 3d6:	ef 90       	pop	r14
 3d8:	df 90       	pop	r13
 3da:	cf 90       	pop	r12
 3dc:	0f 90       	pop	r0
 3de:	0f be       	out	0x3f, r0	; 63
 3e0:	0f 90       	pop	r0
 3e2:	1f 90       	pop	r1
 3e4:	18 95       	reti

000003e6 <__vector_17>:

ISR(TIMER0_OVF_vect)
{
 3e6:	1f 92       	push	r1
 3e8:	0f 92       	push	r0
 3ea:	0f b6       	in	r0, 0x3f	; 63
 3ec:	0f 92       	push	r0
 3ee:	11 24       	eor	r1, r1
	
}
 3f0:	0f 90       	pop	r0
 3f2:	0f be       	out	0x3f, r0	; 63
 3f4:	0f 90       	pop	r0
 3f6:	1f 90       	pop	r1
 3f8:	18 95       	reti

000003fa <SPI_init>:
	return SPDR;				//return any data that was shifted into this register upon transmission.
}

void SPI_init()
{
	MCUCR &= ~(1<<SPIPS);		//make sure we are getting spi not on the _A spi pins.
 3fa:	85 b7       	in	r24, 0x35	; 53
 3fc:	8f 77       	andi	r24, 0x7F	; 127
 3fe:	85 bf       	out	0x35, r24	; 53
	SPCR = (0<<SPIE)|(1<<SPE)|(0<<DORD)|(1<<MSTR)|(0<<CPOL)|(0<<CPHA)|(1<<SPR0)|(0<<SPR1);  //set interrupt, enable SPI, MSB mode, set as master, low is idle, read on leading edge, Set to speed(fosc/64) SPR0=1, SPR1=0
 400:	81 e5       	ldi	r24, 0x51	; 81
 402:	8c bd       	out	0x2c, r24	; 44
	SPSR = (1<<SPI2X);	//set whether we want 2x speed or not (1=2x speed).
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	8d bd       	out	0x2d, r24	; 45
	SPDR = 0x00;		//ensure data register has nothing in it
 408:	1e bc       	out	0x2e, r1	; 46
 40a:	08 95       	ret

0000040c <_exit>:
 40c:	f8 94       	cli

0000040e <__stop_program>:
 40e:	ff cf       	rjmp	.-2      	; 0x40e <__stop_program>
